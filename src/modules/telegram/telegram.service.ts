import { forwardRef, Inject, Injectable, Logger } from '@nestjs/common';
import * as TelegramBot from 'node-telegram-bot-api';
import { ConfigService } from '@nestjs/config';
import { UserService } from '../user/user.service';
import { OrderService } from '../order/order.service';
import { DeliveryService } from '../delivery/delivery.service';
import { formatOrderList, formatUserList, formatProductList, formatCategoryList, formatFeedbackList } from './utils/helpers';
import { getMainKeyboard } from './utils/keyboards';
@Injectable()
export class TelegramService {
  private bot: TelegramBot;
  private logger = new Logger(TelegramService.name);
  private readonly adminTelegramUser: string;

  constructor(
    private configService: ConfigService,
    private userService: UserService,
    @Inject(forwardRef(() => OrderService)) private readonly orderService: OrderService,
    private deliveryService: DeliveryService,
  ) {

    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    const webhookUrl = this.configService.get<string>('WEBHOOK_URL');
    this.adminTelegramUser = this.configService.get<string>('ADMIN_TELEGRAM_USERNAME') || 'Vali_003';

    if (!token) {
      this.logger.error('TELEGRAM_BOT_TOKEN is not defined in .env file');
      throw new Error('TELEGRAM_BOT_TOKEN is not defined');
    }

    if (!webhookUrl) {
      this.logger.error('WEBHOOK_URL is not defined in .env file');
      throw new Error('WEBHOOK_URL is not defined');
    }

    this.bot = new TelegramBot(token, { polling: false });
    this.setupWebhook(webhookUrl);
    this.setupCommands();
  }

 private async setupWebhook(webhookUrl: string) {
  try {
    this.logger.log(`Attempting to set webhook to ${webhookUrl}`);
    const startTime = Date.now();
    const result = await this.bot.setWebHook(webhookUrl);
    const duration = Date.now() - startTime;
    this.logger.log(`Webhook set successfully in ${duration}ms: ${JSON.stringify(result)}`);
  } catch (error) {
    this.logger.error(`Failed to set webhook: ${error.message}`, error.stack);
    throw error;
  }
}

  private setupCommands() {
  this.bot.onText(/üë§ Profilim|üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id.toString();
    try {
      const user = await this.userService.findByTelegramId(telegramId);
      const language = user.language || 'uz';
      const message = `${language === 'uz' ? 'üë§ Profilim' : 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'}\n${language === 'uz' ? 'Ism' : '–ò–º—è'}: ${user.fullName}\n${language === 'uz' ? 'Telefon' : '–¢–µ–ª–µ—Ñ–æ–Ω'}: ${user.phone || (language === 'uz' ? 'Kiritilmagan' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\nTelegram ID: ${user.telegramId}`;
      await this.bot.sendMessage(chatId, message, {
        reply_markup: getMainKeyboard(!user.phone, language),
      });
    } catch (error) {
      this.logger.error(`Error in profile: ${error.message}`);
      const language = (await this.userService.findByTelegramId(telegramId))?.language || 'uz';
      await this.bot.sendMessage(chatId, language === 'uz' ? 'Profil ma‚Äòlumotlarini olishda xato yuz berdi.' : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.');
    }
  });

  this.bot.onText(/üïò Buyurtma tarixi|üïò –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id.toString();
    try {
      const user = await this.userService.findByTelegramId(telegramId);
      const language = user.language || 'uz';
      const orders = await this.orderService.getUserOrders(telegramId);
      const message = orders.length ? formatOrderList(orders, language) : (language === 'uz' ? 'Buyurtmalar mavjud emas.' : '–ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
      await this.bot.sendMessage(chatId, `${language === 'uz' ? 'üïò Buyurtma tarixi' : 'üïò –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤'}\n${message}`, {
        reply_markup: getMainKeyboard(false, language),
      });
    } catch (error) {
      this.logger.error(`Error in order history: ${error.message}`);
      const language = (await this.userService.findByTelegramId(telegramId))?.language || 'uz';
      await this.bot.sendMessage(chatId, language === 'uz' ? 'Buyurtma tarixini olishda xato yuz berdi.' : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
    }
  });

  this.bot.onText(/‚ÑπÔ∏è Biz haqimizda|‚ÑπÔ∏è –û –Ω–∞—Å/, async (msg) => {
    const chatId = msg.chat.id;
    try {
      const user = await this.userService.findByTelegramId(msg.from.id.toString());
      const language = user.language || 'uz';
      const message = `${language === 'uz' ? '‚ÑπÔ∏è Biz haqimizda' : '‚ÑπÔ∏è –û –Ω–∞—Å'}\n${language === 'uz' ? 'Biz onlayn do‚Äòkonmiz, sifatli mahsulotlar va tezkor xizmat taklif qilamiz!' : '–ú—ã –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É!'}\n${language === 'uz' ? 'Aloqa' : '–ö–æ–Ω—Ç–∞–∫—Ç—ã'}: @${this.adminTelegramUser}\n${language === 'uz' ? 'Veb-sayt' : '–í–µ–±-—Å–∞–π—Ç'}: https://yourshop.uz`;
      await this.bot.sendMessage(chatId, message, {
        reply_markup: getMainKeyboard(false, language),
      });
    } catch (error) {
      this.logger.error(`Error in about: ${error.message}`);
      const language = (await this.userService.findByTelegramId(msg.from.id.toString()))?.language || 'uz';
      await this.bot.sendMessage(chatId, language === 'uz' ? 'Biz haqimizda ma‚Äòlumot olishda xato yuz berdi.' : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å.');
    }
  });
}
  getBotInstance(): TelegramBot {
    return this.bot;
  }

  async handleWebhookUpdate(update: TelegramBot.Update) {
    try {
      const startTime = Date.now();
      await this.bot.processUpdate(update);
      const duration = Date.now() - startTime;
      this.logger.log(`Webhook update processed in ${duration}ms`);
    } catch (error) {
      this.logger.error(`Webhook update failed: ${error.message}`);
      throw error;
    }
  }

  async sendMessage(chatId: any, text: string, options: TelegramBot.SendMessageOptions = {}) {
  try {
    const finalOptions: TelegramBot.SendMessageOptions = {
      ...options,
      parse_mode: options.parse_mode ?? 'HTML',
    };

    await this.bot.sendMessage(chatId, text, finalOptions);
  } catch (error) {
    this.logger.error(`Error sending message to chatId ${chatId}: ${error.message}`);
    throw error;
  }
}


  async sendPhoto(chatId: number, photo: string, options?: TelegramBot.SendPhotoOptions) {
    try {
      await this.bot.sendPhoto(chatId, photo, { ...options, parse_mode: options?.parse_mode || 'HTML' });
    } catch (error) {
      this.logger.error(`Error sending photo to chatId ${chatId}: ${error.message}`);
      throw error;
    }
  }

  async sendChatAction(chatId: string | number, action: TelegramBot.ChatAction) {
    try {
      await this.bot.sendChatAction(chatId, action);
    } catch (error) {
      this.logger.error(`Error sending chat action to chatId ${chatId}: ${error.message}`);
      throw error;
    }
  }
}